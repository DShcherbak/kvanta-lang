 document      =  { SOI ~ source_file ~ EOI }
source_file   =  _{ forest | block }
block         =  { statement* }
global_block  =  { "global" ~ "{" ~ strong_init* ~"}" }
strong_init   =  { type_name ~ initialization  ~ ";"}

forest 		  = { (function | global_block)+ }
bracket_block =  { "{" ~ block ~ "}" }
newline       = _{ "\n" | "\r" }
WHITESPACE    = _{ " " | "\t" | "\n" | "\r" }

fn_arg  = {type_name ~ ident}
fn_arg_list = {(fn_arg ~ ("," ~ fn_arg)*)?}
fn_header = { "func" ~ ident ~ "(" ~ fn_arg_list ~ ")" ~ ("->" ~ type_name)? }
function      =  { fn_header ~ "{" ~ block ~ "}" }

statement      =  { (command | init_statement | if_statement | for_statement | while_statement | return_statement) }
command        =  { function_call ~ ";" }
function_call  =  { ident ~ "(" ~ params? ~ ")" }
params         = _{ expression ~ ("," ~ expression)* }
init_statement =  { type_name? ~ initialization  ~ ";" }
initialization =  { noun ~ "=" ~ expression }
const_key      =  {"const"}

if_statement    =  { "if" ~ "(" ~ expression ~ ")" ~ bracket_block ~ else_block?}
else_block      = _{ "else" ~ bracket_block }
for_statement   =  { "for" ~ ident ~ "in" ~ range ~ bracket_block }
range           =  { "(" ~ expression ~ ".." ~ expression ~ ")" }
numVar          = _{ integer | noun }
while_statement =  { "while" ~ "(" ~ expression ~ ")" ~ bracket_block }
return_statement = { "return" ~ expression ~ ";" }

type_name      =  { const_key? ~ (array_type | primitive_type) }
primitive_type = { "bool" | "int" | "color" | "float" }
array_type   = { "array<" ~ type_name ~ "," ~ integer ~ ">" }

number     = { decimal | integer }
expression = {
	dyadicExpr
  | monadicExpr
  | term
}

monadicExpr  = { operator ~ term }
dyadicExpr   = { (monadicExpr | term) ~ operator ~ expression }
parenth_expr = { "(" ~ expression ~ ")" }

box = {"[" ~ expression ~ "]" }
noun = {ident ~ box* }
term = _{ decimal | integer | color | boolean | key | function_call | noun | array_literal | parenth_expr }

operator = {
  
  | "+"
  | "*"
  | "-"
  | "/"
  | "%"
  | ">="
  | "<="
  | "!="
  | "<"
  | ">"
  | "=="
  | "&&"
  | "||"
  | "!"
}
array_literal = { "{" ~ (term ~ ("," ~ term)*)?  ~ "}" }
boolean = { "true" | "false" }
color = @{"Color::" ~ ident}
key   = @{"Key::" ~ ident}
integer = @{ "-"? ~ ASCII_DIGIT+ }
decimal = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
ident   = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
string  = @{ "'" ~ ("''" | (!"'" ~ ANY))* ~ "'" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }