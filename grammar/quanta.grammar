@top Program { line* }

@precedence {
  mult @left
  add @left
  shift @left
  bitAnd @left
  bitXor @left
  bitOr @left
  compare @left
  and @left
  or @left
}

line { Comment | expression }

expression { Function | GlobalBlock | FunctionCall | IfExpression | ForExpression | WhileExpression | ReturnExpression | Name | Type  | Number | Float | Color | Key | BinaryExpression }

GlobalBlock { Global Block }

Comment { CommentInfo }

Function { Func FuncName "(" Args? ")" Block}

FunctionCall { FuncName "(" Params? ")" }

IfExpression { If "(" expression ")" Block ElseExpression?}

ElseExpression { Else Block }

ForExpression{ For expression In expression Block}

WhileExpression { While "(" expression ")" Block }

ReturnExpression { Return expression }

Params{ expression ("," expression)*}

FuncName{Name}

Args { Arg ("," Arg)* }

Arg {Type Name}

Block { "{" expression* "}" }

BinaryExpression {
  expression !add ArithOp { "+" | "-" } expression |
  expression !mult ArithOp { "*" | Division | "%" } expression |
  expression !shift BitOp { "<<" | ">>" } expression |
  expression !bitAnd BitOp { "&" } expression |
  expression !bitXor BitOp { "^" } expression |
  expression !bitOr BitOp { "|" } expression |
  expression !compare CompareOp {">" | ">=" | "<" | "<=" | "==" | "!=" } expression |
  expression !and LogicOp { "&&" } expression |
  expression !or LogicOp { "||" } expression
}

Type {
  @specialize[@name=Type]<Name,
    "bool" | "char" | "int" | "float">
}

If {
  @specialize[@name=If]<Name, "if">
}

In {
  @specialize[@name=In]<Name, "in">
}

For {
  @specialize[@name=For]<Name, "for">
}

While {
  @specialize[@name=While]<Name, "while">
}

Else {
  @specialize[@name=Else]<Name, "else">
}

Return {
  @specialize[@name=Return]<Name, "return">
}

Global {
  @specialize[@name=Global]<Name, "global">
}

Color {
  @specialize[@name=Color]<Name, "Color">
}

Key {
  @specialize[@name=Key]<Name, "Key">
}

Func {
  @specialize[@name=Func]<Name, "func">
}

@tokens {
  Name { @asciiLetter $[a-zA-Z0-9_]* }
  //FuncName {@asciiLetter+}
  Number { @digit+ }
  Float {@digit+ "." @digit+}
  CommentInfo { "//" ![\n]* }
  Division { "/" }
  @precedence {Name, Float, Number, CommentInfo, Division}
}

@external propSource quantaHighlight from "./highlight"
